//Trig functions and helpers
//Note: Eagle's implementation is with radians.

/**** Angle Converters ****/

//Converts degrees into radians.
real deg2rad(real deg) {
    return deg * (PI/180.0);
}

//Converts radians into degrees.
real rad2deg(real rad) {
    return rad * (180.0/PI);
}


/**** Radians Trig ****/

//acos function with radians
real acosr(real x) {
    return acos(x);
}

//asin function with radians
real asinr(real x) {
    return asin(x);
}

//atan function with radians
real atanr(real x) {
    return atan(x);
}

//atan2 function with radians
//The range of this implementation is (-PI, PI]
//and depends on an arctan function whose range is (-PI/2.0, PI/2.0]
real atan2r(real y, real x) {
    real angle = 0;
    
    if (x > 0) {
        angle = atanr(y/x);
    }
    else if (x < 0) {
        if (y >= 0) {
            angle = atanr(y/x) + PI;
        }
        else {
            angle = atanr(y/x) - PI;
        }
    }
    else {
        if (y > 0) {
            angle = PI/2.0;
        }
        else if (y < 0) {
            angle = -PI/2.0;
        }
        // Typically undefined if x=0 & y=0
        //This implementation uses 0 instead.
        else {
            angle = 0;
        }
    }
    return angle;
}

//cos function with radians
real cosr(real x) {
    return cos(x);
}

//sin function with radians
real sinr(real x) {
    return sin(x);
}

//tan function with radians
real tanr(real x) {
    return tan(x);
}

/**** Degrees Trig ****/

//acos function with degrees
real acosd(real x) {
    return rad2deg(acos(x));
}

//asin function with degrees
real asind(real x) {
    return rad2deg(asin(x));
}

//atan function with degrees
real atand(real x) {
    return rad2deg(atan(x));
}

//atan2 function with degrees
//The range of this implementation is (-180.0, 180.0]
//and depends on an arctan function whose range is (-90.0, 90.0]
real atan2d(real y, real x) {
    real angle = 0;
    
    if (x > 0) {
        angle = atand(y/x);
    }
    else if (x < 0) {
        if (y >= 0) {
            angle = atand(y/x) + 180.0;
        }
        else {
            angle = atand(y/x) - 180.0;
        }
    }
    else {
        if (y > 0) {
            angle = 90.0;
        }
        else if (y < 0) {
            angle = -90.0;
        }
        // Typically undefined if x=0 & y=0
        //This implementation uses 0 instead.
        else {
            angle = 0;
        }
    }
    return angle;
}

//cos function with degrees
real cosd(real x) {
    return cos(deg2rad(x));
}

//sin function with degrees
real sind(real x) {
    return sin(deg2rad(x));
}

//tan function with degrees
real tand(real x) {
    return tan(deg2rad(x));
}

